{
  "{\"sourceRoot\":\"/Users/wisemk/Desktop/study/Express/nodeServerViemo\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/wisemk/Desktop/study/Express/nodeServerViemo\",\"filename\":\"/Users/wisemk/Desktop/study/Express/nodeServerViemo/app.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/wisemk/Desktop/study/Express/nodeServerViemo\",\"plugins\":[],\"presets\":[]}:7.8.6": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/wisemk/Desktop/study/Express/nodeServerViemo",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/wisemk/Desktop/study/Express/nodeServerViemo",
      "filename": "/Users/wisemk/Desktop/study/Express/nodeServerViemo/app.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/wisemk/Desktop/study/Express/nodeServerViemo",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/wisemk/Desktop/study/Express/nodeServerViemo/app.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/wisemk/Desktop/study/Express/nodeServerViemo/app.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/wisemk/Desktop/study/Express/nodeServerViemo",
        "sourceFileName": "app.js"
      }
    },
    "ast": null,
    "code": "import express from 'express'; // var express = require('express')\n\nvar app = express();\n\nvar bodyParser = require('body-parser'); //body-parser를 가져온다.\n\n\nvar mysql = require('mysql'); //import로 구축\n\n\nconst {\n  a,\n  b\n} = {\n  a: 1,\n  b: 2\n};\nconsole.log(\"***\", a, b);\nvar connection = mysql.createConnection({\n  host: 'localhost',\n  port: 3306,\n  user: ''\n});\napp.listen(3000, () => {\n  console.log(\"start!!!! express server on port 3000\");\n}); //http://127.0.0.1:3000/\n\napp.use(express.static('public')); //public이라는 디렉토리에 static을 걸어줘서 자유롭게 js파일을 가져올 수 있다.\n\napp.use(bodyParser.json()); //클라이언트에서 오는 통신이 json인경우  //express에 bodyparser를 쓰도록 알려줘야한다.\n\napp.use(bodyParser.urlencoded({\n  extended: true\n})); //post로 올때는 urlencoded()를 이용한다/\n\napp.set('view engine', 'ejs'); //view 엔진은 ejs로 사용하겠다고 express한테 알려주는것 <--view폴더를 만들어 ejs파일을 생성해본다.\n\napp.get('/', function (req, res) {\n  //res.send(\"<h1>hi friend</h1>\")\n  res.sendFile(__dirname + \"/public/main.html\"); //절대경로라는것을 표시해주기 위해 __dirname을 사용한다.\n});\napp.get('/main', function (req, res) {\n  res.sendFile(__dirname + \"/public/main.html\");\n});\napp.post('/email_post', (req, res) => {\n  //form.html에서 submit해주면 /email_post로 라우팅을 타고 콜백함수를 실행한다.\n  //get방식으로 전송하는경우 데이터를 받을때 req.params('email')이런식으로 받지만 post는 body-parser를 이용한다.\n  console.log(req.body.email); //{ email: 'dsfdsfds' } body로해주면 object형태로 오는 것을 알 수 있다.\n  //res.send(\"<h1>welcome! \"+ req.body.email + \"</h1>\" )\n\n  res.render('email.ejs', {\n    'email': req.body.email\n  }); //ejs에 오른쪽 객체 데이터가 email이라는 name값을 찾아서 req값을 찾아서 치환한다음에 클라이언트에 응답을해주게 되어있다\n}); //post로 받은것을 '/ajax_send_email' url로 라우팅해서 \n\napp.post('/ajax_send_email', (req, res) => {\n  console.log(req.body.email); //콘솔을 찍고 \n\n  var responseData = {\n    'result': 'ok',\n    'email': req.body.email\n  }; //결과값을 포함해서\n\n  res.json(responseData); //json으로 응답하고 form.html addEventListenr로가서\n}); //아래코드가 100번 먼저실행되고 그다음 위에 있는 콜백함수가 실행된다.\n// for(let i=0; i<100; i++){\n// console.log(\"end of server code...\")\n// }\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyJleHByZXNzIiwiYXBwIiwiYm9keVBhcnNlciIsInJlcXVpcmUiLCJteXNxbCIsImEiLCJiIiwiY29uc29sZSIsImxvZyIsImNvbm5lY3Rpb24iLCJjcmVhdGVDb25uZWN0aW9uIiwiaG9zdCIsInBvcnQiLCJ1c2VyIiwibGlzdGVuIiwidXNlIiwic3RhdGljIiwianNvbiIsInVybGVuY29kZWQiLCJleHRlbmRlZCIsInNldCIsImdldCIsInJlcSIsInJlcyIsInNlbmRGaWxlIiwiX19kaXJuYW1lIiwicG9zdCIsImJvZHkiLCJlbWFpbCIsInJlbmRlciIsInJlc3BvbnNlRGF0YSJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsT0FBUCxNQUFvQixTQUFwQixDLENBQ0E7O0FBQ0EsSUFBSUMsR0FBRyxHQUFHRCxPQUFPLEVBQWpCOztBQUNBLElBQUlFLFVBQVUsR0FBR0MsT0FBTyxDQUFDLGFBQUQsQ0FBeEIsQyxDQUF1Qzs7O0FBQ3ZDLElBQUlDLEtBQUssR0FBR0QsT0FBTyxDQUFDLE9BQUQsQ0FBbkIsQyxDQUE0Qjs7O0FBQzVCLE1BQU07QUFBRUUsRUFBQUEsQ0FBRjtBQUFLQyxFQUFBQTtBQUFMLElBQVc7QUFBQ0QsRUFBQUEsQ0FBQyxFQUFFLENBQUo7QUFBT0MsRUFBQUEsQ0FBQyxFQUFFO0FBQVYsQ0FBakI7QUFDQUMsT0FBTyxDQUFDQyxHQUFSLENBQVksS0FBWixFQUFtQkgsQ0FBbkIsRUFBc0JDLENBQXRCO0FBQ0EsSUFBSUcsVUFBVSxHQUFHTCxLQUFLLENBQUNNLGdCQUFOLENBQXVCO0FBQ3ZDQyxFQUFBQSxJQUFJLEVBQUcsV0FEZ0M7QUFFdkNDLEVBQUFBLElBQUksRUFBRyxJQUZnQztBQUd2Q0MsRUFBQUEsSUFBSSxFQUFHO0FBSGdDLENBQXZCLENBQWpCO0FBTUFaLEdBQUcsQ0FBQ2EsTUFBSixDQUFXLElBQVgsRUFBaUIsTUFBTTtBQUN0QlAsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksdUNBQVo7QUFDQSxDQUZELEUsQ0FHQTs7QUFFQVAsR0FBRyxDQUFDYyxHQUFKLENBQVFmLE9BQU8sQ0FBQ2dCLE1BQVIsQ0FBZSxRQUFmLENBQVIsRSxDQUFpQzs7QUFDakNmLEdBQUcsQ0FBQ2MsR0FBSixDQUFRYixVQUFVLENBQUNlLElBQVgsRUFBUixFLENBQTBCOztBQUMxQmhCLEdBQUcsQ0FBQ2MsR0FBSixDQUFRYixVQUFVLENBQUNnQixVQUFYLENBQXNCO0FBQUNDLEVBQUFBLFFBQVEsRUFBQztBQUFWLENBQXRCLENBQVIsRSxDQUErQzs7QUFDL0NsQixHQUFHLENBQUNtQixHQUFKLENBQVEsYUFBUixFQUF1QixLQUF2QixFLENBQTZCOztBQUc3Qm5CLEdBQUcsQ0FBQ29CLEdBQUosQ0FBUSxHQUFSLEVBQVksVUFBU0MsR0FBVCxFQUFhQyxHQUFiLEVBQWlCO0FBQzVCO0FBQ0FBLEVBQUFBLEdBQUcsQ0FBQ0MsUUFBSixDQUFhQyxTQUFTLEdBQUcsbUJBQXpCLEVBRjRCLENBRWlCO0FBQzdDLENBSEQ7QUFLQXhCLEdBQUcsQ0FBQ29CLEdBQUosQ0FBUSxPQUFSLEVBQWdCLFVBQVNDLEdBQVQsRUFBYUMsR0FBYixFQUFpQjtBQUNoQ0EsRUFBQUEsR0FBRyxDQUFDQyxRQUFKLENBQWFDLFNBQVMsR0FBRyxtQkFBekI7QUFDQSxDQUZEO0FBSUF4QixHQUFHLENBQUN5QixJQUFKLENBQVMsYUFBVCxFQUF1QixDQUFDSixHQUFELEVBQUtDLEdBQUwsS0FBVztBQUFDO0FBQ2xDO0FBQ0FoQixFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWWMsR0FBRyxDQUFDSyxJQUFKLENBQVNDLEtBQXJCLEVBRmlDLENBRU47QUFDM0I7O0FBQ0FMLEVBQUFBLEdBQUcsQ0FBQ00sTUFBSixDQUFXLFdBQVgsRUFBdUI7QUFBQyxhQUFVUCxHQUFHLENBQUNLLElBQUosQ0FBU0M7QUFBcEIsR0FBdkIsRUFKaUMsQ0FJaUI7QUFDbEQsQ0FMRCxFLENBT0E7O0FBQ0EzQixHQUFHLENBQUN5QixJQUFKLENBQVMsa0JBQVQsRUFBNEIsQ0FBQ0osR0FBRCxFQUFLQyxHQUFMLEtBQVc7QUFDdENoQixFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWWMsR0FBRyxDQUFDSyxJQUFKLENBQVNDLEtBQXJCLEVBRHNDLENBQ1g7O0FBQzNCLE1BQUlFLFlBQVksR0FBRztBQUFDLGNBQVUsSUFBWDtBQUFpQixhQUFVUixHQUFHLENBQUNLLElBQUosQ0FBU0M7QUFBcEMsR0FBbkIsQ0FGc0MsQ0FFdUI7O0FBQzdETCxFQUFBQSxHQUFHLENBQUNOLElBQUosQ0FBU2EsWUFBVCxFQUhzQyxDQUdoQjtBQUN0QixDQUpELEUsQ0FXQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIvVXNlcnMvd2lzZW1rL0Rlc2t0b3Avc3R1ZHkvRXhwcmVzcy9ub2RlU2VydmVyVmllbW8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZXhwcmVzcyBmcm9tICdleHByZXNzJ1xuLy8gdmFyIGV4cHJlc3MgPSByZXF1aXJlKCdleHByZXNzJylcbnZhciBhcHAgPSBleHByZXNzKClcbnZhciBib2R5UGFyc2VyID0gcmVxdWlyZSgnYm9keS1wYXJzZXInKS8vYm9keS1wYXJzZXLrpbwg6rCA7KC47Jio64ukLlxudmFyIG15c3FsID0gcmVxdWlyZSgnbXlzcWwnKS8vaW1wb3J066GcIOq1rOy2lVxuY29uc3QgeyBhLCBiIH0gPSB7YTogMSwgYjogMn1cbmNvbnNvbGUubG9nKFwiKioqXCIsIGEsIGIpXG52YXIgY29ubmVjdGlvbiA9IG15c3FsLmNyZWF0ZUNvbm5lY3Rpb24oe1xuXHRob3N0IDogJ2xvY2FsaG9zdCcsXG5cdHBvcnQgOiAzMzA2LFxuXHR1c2VyIDogJydcbn0pXG5cbmFwcC5saXN0ZW4oMzAwMCwgKCkgPT4ge1xuXHRjb25zb2xlLmxvZyhcInN0YXJ0ISEhISBleHByZXNzIHNlcnZlciBvbiBwb3J0IDMwMDBcIilcbn0pXG4vL2h0dHA6Ly8xMjcuMC4wLjE6MzAwMC9cblxuYXBwLnVzZShleHByZXNzLnN0YXRpYygncHVibGljJykpLy9wdWJsaWPsnbTrnbzripQg65SU66CJ7Yag66as7JeQIHN0YXRpY+ydhCDqsbjslrTspJjshJwg7J6Q7Jyg66Gt6rKMIGpz7YyM7J287J2EIOqwgOyguOyYrCDsiJgg7J6I64ukLlxuYXBwLnVzZShib2R5UGFyc2VyLmpzb24oKSkvL+2BtOudvOydtOyWuO2KuOyXkOyEnCDsmKTripQg7Ya17Iug7J20IGpzb27snbjqsr3smrAgIC8vZXhwcmVzc+yXkCBib2R5cGFyc2Vy66W8IOyTsOuPhOuhnSDslYzroKTspJjslbztlZzri6QuXG5hcHAudXNlKGJvZHlQYXJzZXIudXJsZW5jb2RlZCh7ZXh0ZW5kZWQ6dHJ1ZX0pKS8vcG9zdOuhnCDsmKzrlYzripQgdXJsZW5jb2RlZCgp66W8IOydtOyaqe2VnOuLpC9cbmFwcC5zZXQoJ3ZpZXcgZW5naW5lJywgJ2VqcycpLy92aWV3IOyXlOynhOydgCBlanProZwg7IKs7Jqp7ZWY6rKg64uk6rOgIGV4cHJlc3PtlZzthYwg7JWM66Ck7KO864qU6rKDIDwtLXZpZXftj7TrjZTrpbwg66eM65Ok7Ja0IGVqc+2MjOydvOydhCDsg53shLHtlbTrs7jri6QuXG5cblxuYXBwLmdldCgnLycsZnVuY3Rpb24ocmVxLHJlcyl7XG5cdC8vcmVzLnNlbmQoXCI8aDE+aGkgZnJpZW5kPC9oMT5cIilcblx0cmVzLnNlbmRGaWxlKF9fZGlybmFtZSArIFwiL3B1YmxpYy9tYWluLmh0bWxcIikvL+ygiOuMgOqyveuhnOudvOuKlOqyg+ydhCDtkZzsi5ztlbTso7zquLAg7JyE7ZW0IF9fZGlybmFtZeydhCDsgqzsmqntlZzri6QuXG59KVxuXG5hcHAuZ2V0KCcvbWFpbicsZnVuY3Rpb24ocmVxLHJlcyl7XG5cdHJlcy5zZW5kRmlsZShfX2Rpcm5hbWUgKyBcIi9wdWJsaWMvbWFpbi5odG1sXCIpXG59KVxuXG5hcHAucG9zdCgnL2VtYWlsX3Bvc3QnLChyZXEscmVzKT0+ey8vZm9ybS5odG1s7JeQ7IScIHN1Ym1pdO2VtOyjvOuptCAvZW1haWxfcG9zdOuhnCDrnbzsmrDtjIXsnYQg7YOA6rOgIOy9nOuwse2VqOyImOulvCDsi6TtlontlZzri6QuXG5cdC8vZ2V067Cp7Iud7Jy866GcIOyghOyGoe2VmOuKlOqyveyasCDrjbDsnbTthLDrpbwg67Cb7J2E65WMIHJlcS5wYXJhbXMoJ2VtYWlsJynsnbTrn7Dsi53snLzroZwg67Cb7KeA66eMIHBvc3TripQgYm9keS1wYXJzZXLrpbwg7J207Jqp7ZWc64ukLlxuXHRjb25zb2xlLmxvZyhyZXEuYm9keS5lbWFpbCkvL3sgZW1haWw6ICdkc2Zkc2ZkcycgfSBib2R566Gc7ZW07KO866m0IG9iamVjdO2Yle2DnOuhnCDsmKTripQg6rKD7J2EIOyVjCDsiJgg7J6I64ukLlxuXHQvL3Jlcy5zZW5kKFwiPGgxPndlbGNvbWUhIFwiKyByZXEuYm9keS5lbWFpbCArIFwiPC9oMT5cIiApXG5cdHJlcy5yZW5kZXIoJ2VtYWlsLmVqcycseydlbWFpbCcgOiByZXEuYm9keS5lbWFpbH0pLy9lanPsl5Ag7Jik66W47Kq9IOqwneyytCDrjbDsnbTthLDqsIAgZW1haWzsnbTrnbzripQgbmFtZeqwkuydhCDssL7slYTshJwgcmVx6rCS7J2EIOywvuyVhOyEnCDsuZjtmZjtlZzri6TsnYzsl5Ag7YG065287J207Ja47Yq47JeQIOydkeuLteydhO2VtOyjvOqyjCDrkJjslrTsnojri6Rcbn0pXG5cbi8vcG9zdOuhnCDrsJvsnYDqsoPsnYQgJy9hamF4X3NlbmRfZW1haWwnIHVybOuhnCDrnbzsmrDtjIXtlbTshJwgXG5hcHAucG9zdCgnL2FqYXhfc2VuZF9lbWFpbCcsKHJlcSxyZXMpPT57XG5cdGNvbnNvbGUubG9nKHJlcS5ib2R5LmVtYWlsKS8v7L2Y7IaU7J2EIOywjeqzoCBcblx0dmFyIHJlc3BvbnNlRGF0YSA9IHsncmVzdWx0JzogJ29rJywgJ2VtYWlsJyA6IHJlcS5ib2R5LmVtYWlsfS8v6rKw6rO86rCS7J2EIO2PrO2VqO2VtOyEnFxuXHRyZXMuanNvbihyZXNwb25zZURhdGEpLy9qc29u7Jy866GcIOydkeuLte2VmOqzoCBmb3JtLmh0bWwgYWRkRXZlbnRMaXN0ZW5y66Gc6rCA7IScXG59KVxuXG5cblxuXG5cblxuLy/slYTrnpjsvZTrk5zqsIAgMTAw67KIIOuovOyggOyLpO2WieuQmOqzoCDqt7jri6TsnYwg7JyE7JeQIOyeiOuKlCDsvZzrsLHtlajsiJjqsIAg7Iuk7ZaJ65Cc64ukLlxuLy8gZm9yKGxldCBpPTA7IGk8MTAwOyBpKyspe1xuLy8gY29uc29sZS5sb2coXCJlbmQgb2Ygc2VydmVyIGNvZGUuLi5cIilcbi8vIH0iXX0=",
    "map": {
      "version": 3,
      "sources": [
        "app.js"
      ],
      "names": [
        "express",
        "app",
        "bodyParser",
        "require",
        "mysql",
        "a",
        "b",
        "console",
        "log",
        "connection",
        "createConnection",
        "host",
        "port",
        "user",
        "listen",
        "use",
        "static",
        "json",
        "urlencoded",
        "extended",
        "set",
        "get",
        "req",
        "res",
        "sendFile",
        "__dirname",
        "post",
        "body",
        "email",
        "render",
        "responseData"
      ],
      "mappings": "AAAA,OAAOA,OAAP,MAAoB,SAApB,C,CACA;;AACA,IAAIC,GAAG,GAAGD,OAAO,EAAjB;;AACA,IAAIE,UAAU,GAAGC,OAAO,CAAC,aAAD,CAAxB,C,CAAuC;;;AACvC,IAAIC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAAnB,C,CAA4B;;;AAC5B,MAAM;AAAEE,EAAAA,CAAF;AAAKC,EAAAA;AAAL,IAAW;AAACD,EAAAA,CAAC,EAAE,CAAJ;AAAOC,EAAAA,CAAC,EAAE;AAAV,CAAjB;AACAC,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBH,CAAnB,EAAsBC,CAAtB;AACA,IAAIG,UAAU,GAAGL,KAAK,CAACM,gBAAN,CAAuB;AACvCC,EAAAA,IAAI,EAAG,WADgC;AAEvCC,EAAAA,IAAI,EAAG,IAFgC;AAGvCC,EAAAA,IAAI,EAAG;AAHgC,CAAvB,CAAjB;AAMAZ,GAAG,CAACa,MAAJ,CAAW,IAAX,EAAiB,MAAM;AACtBP,EAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ;AACA,CAFD,E,CAGA;;AAEAP,GAAG,CAACc,GAAJ,CAAQf,OAAO,CAACgB,MAAR,CAAe,QAAf,CAAR,E,CAAiC;;AACjCf,GAAG,CAACc,GAAJ,CAAQb,UAAU,CAACe,IAAX,EAAR,E,CAA0B;;AAC1BhB,GAAG,CAACc,GAAJ,CAAQb,UAAU,CAACgB,UAAX,CAAsB;AAACC,EAAAA,QAAQ,EAAC;AAAV,CAAtB,CAAR,E,CAA+C;;AAC/ClB,GAAG,CAACmB,GAAJ,CAAQ,aAAR,EAAuB,KAAvB,E,CAA6B;;AAG7BnB,GAAG,CAACoB,GAAJ,CAAQ,GAAR,EAAY,UAASC,GAAT,EAAaC,GAAb,EAAiB;AAC5B;AACAA,EAAAA,GAAG,CAACC,QAAJ,CAAaC,SAAS,GAAG,mBAAzB,EAF4B,CAEiB;AAC7C,CAHD;AAKAxB,GAAG,CAACoB,GAAJ,CAAQ,OAAR,EAAgB,UAASC,GAAT,EAAaC,GAAb,EAAiB;AAChCA,EAAAA,GAAG,CAACC,QAAJ,CAAaC,SAAS,GAAG,mBAAzB;AACA,CAFD;AAIAxB,GAAG,CAACyB,IAAJ,CAAS,aAAT,EAAuB,CAACJ,GAAD,EAAKC,GAAL,KAAW;AAAC;AAClC;AACAhB,EAAAA,OAAO,CAACC,GAAR,CAAYc,GAAG,CAACK,IAAJ,CAASC,KAArB,EAFiC,CAEN;AAC3B;;AACAL,EAAAA,GAAG,CAACM,MAAJ,CAAW,WAAX,EAAuB;AAAC,aAAUP,GAAG,CAACK,IAAJ,CAASC;AAApB,GAAvB,EAJiC,CAIiB;AAClD,CALD,E,CAOA;;AACA3B,GAAG,CAACyB,IAAJ,CAAS,kBAAT,EAA4B,CAACJ,GAAD,EAAKC,GAAL,KAAW;AACtChB,EAAAA,OAAO,CAACC,GAAR,CAAYc,GAAG,CAACK,IAAJ,CAASC,KAArB,EADsC,CACX;;AAC3B,MAAIE,YAAY,GAAG;AAAC,cAAU,IAAX;AAAiB,aAAUR,GAAG,CAACK,IAAJ,CAASC;AAApC,GAAnB,CAFsC,CAEuB;;AAC7DL,EAAAA,GAAG,CAACN,IAAJ,CAASa,YAAT,EAHsC,CAGhB;AACtB,CAJD,E,CAWA;AACA;AACA;AACA",
      "sourceRoot": "/Users/wisemk/Desktop/study/Express/nodeServerViemo",
      "sourcesContent": [
        "import express from 'express'\n// var express = require('express')\nvar app = express()\nvar bodyParser = require('body-parser')//body-parser를 가져온다.\nvar mysql = require('mysql')//import로 구축\nconst { a, b } = {a: 1, b: 2}\nconsole.log(\"***\", a, b)\nvar connection = mysql.createConnection({\n\thost : 'localhost',\n\tport : 3306,\n\tuser : ''\n})\n\napp.listen(3000, () => {\n\tconsole.log(\"start!!!! express server on port 3000\")\n})\n//http://127.0.0.1:3000/\n\napp.use(express.static('public'))//public이라는 디렉토리에 static을 걸어줘서 자유롭게 js파일을 가져올 수 있다.\napp.use(bodyParser.json())//클라이언트에서 오는 통신이 json인경우  //express에 bodyparser를 쓰도록 알려줘야한다.\napp.use(bodyParser.urlencoded({extended:true}))//post로 올때는 urlencoded()를 이용한다/\napp.set('view engine', 'ejs')//view 엔진은 ejs로 사용하겠다고 express한테 알려주는것 <--view폴더를 만들어 ejs파일을 생성해본다.\n\n\napp.get('/',function(req,res){\n\t//res.send(\"<h1>hi friend</h1>\")\n\tres.sendFile(__dirname + \"/public/main.html\")//절대경로라는것을 표시해주기 위해 __dirname을 사용한다.\n})\n\napp.get('/main',function(req,res){\n\tres.sendFile(__dirname + \"/public/main.html\")\n})\n\napp.post('/email_post',(req,res)=>{//form.html에서 submit해주면 /email_post로 라우팅을 타고 콜백함수를 실행한다.\n\t//get방식으로 전송하는경우 데이터를 받을때 req.params('email')이런식으로 받지만 post는 body-parser를 이용한다.\n\tconsole.log(req.body.email)//{ email: 'dsfdsfds' } body로해주면 object형태로 오는 것을 알 수 있다.\n\t//res.send(\"<h1>welcome! \"+ req.body.email + \"</h1>\" )\n\tres.render('email.ejs',{'email' : req.body.email})//ejs에 오른쪽 객체 데이터가 email이라는 name값을 찾아서 req값을 찾아서 치환한다음에 클라이언트에 응답을해주게 되어있다\n})\n\n//post로 받은것을 '/ajax_send_email' url로 라우팅해서 \napp.post('/ajax_send_email',(req,res)=>{\n\tconsole.log(req.body.email)//콘솔을 찍고 \n\tvar responseData = {'result': 'ok', 'email' : req.body.email}//결과값을 포함해서\n\tres.json(responseData)//json으로 응답하고 form.html addEventListenr로가서\n})\n\n\n\n\n\n\n//아래코드가 100번 먼저실행되고 그다음 위에 있는 콜백함수가 실행된다.\n// for(let i=0; i<100; i++){\n// console.log(\"end of server code...\")\n// }"
      ]
    },
    "sourceType": "module",
    "mtime": 1583233998578
  }
}